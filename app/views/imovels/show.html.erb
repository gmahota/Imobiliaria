<style>
	#map-canvas {
		width: 500px;
		height: 500px;
	}
</style>

<!-- OpenLayers core js -->
        <script
        src="http://www.openlayers.org/dev/OpenLayers.js"></script>
        
        <script src="http://openlayers.org/api/OpenLayers.js"></script>
       
        <!-- OpenStreetMap base layer js -->
        <script
        src="http://www.openstreetmap.org/openlayers/OpenStreetMap.js"></script>
        <!-- Google Maps -->
        <script src="http://maps.google.com/maps/api/js?sensor=false">
        </script>


<script type="text/javascript">
        function initialize() {
            
            var lat = <%= @imovel.latitude %>
            var lng = <%=  @imovel.longitude %>
            var raio = <%=  @imovel.raio %>
            

            //set up projections
            // World Geodetic System 1984 projection
            var WGS84 = new OpenLayers.Projection("EPSG:4326");
            
            // WGS84 Google Mercator projection
            var WGS84_google_mercator = new OpenLayers.Projection("EPSG:900913");
            //Initialize the map
            //creates a new openlayers map in the <div> html element id map
            var map = new OpenLayers.Map ("map", {
                controls:[
                    //allows the user pan ability
                    new OpenLayers.Control.Navigation(),
                    //displays the pan/zoom tools
                    new OpenLayers.Control.PanZoom(),
                    //displays a layer switcher
                    new OpenLayers.Control.LayerSwitcher(),
                    //displays the mouse position's coordinates in a <div> html element with
                    new OpenLayers.Control.MousePosition({
                        div:document.getElementById("coordinates")
                    })
                ],
                    projection: WGS84_google_mercator,
                    displayProjection: WGS84
                    
        
            } );
            //base layers
            var openstreetmap = new OpenLayers.Layer.OSM();
            var google_maps = new OpenLayers.Layer.Google(
                "Google Maps", {
                    numZoomLevels: 15
                }
            );
            var google_satellite = new OpenLayers.Layer.Google(
                "Google Satellite", {
                    type: google.maps.MapTypeId.SATELLITE,
                    numZoomLevels: 15
                }
            );
            //wfs overlay
            var wfs_layer = new OpenLayers.Layer.Vector("Blocks", {
                strategies: [new OpenLayers.Strategy.BBOX()],
                projection: WGS84,
                protocol: new OpenLayers.Protocol.WFS({
                    version: "1.1.0",
                    url: "http://hazardmapping.com/geoserver/wfs",
                    featureNS :  "http://www.opengeospatial.net/cite",
                    featureType: "testblocks",
                })
            });
            map.addLayers([openstreetmap, google_maps, google_satellite, wfs_layer]);
            
            var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
            var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
            var position       = new OpenLayers.LonLat(lng,lat).transform( fromProjection, toProjection);
            var zoom           = 15; 
     
            map.setCenter(position, zoom );


            //add markers
            var couche_markers = new OpenLayers.Layer.Markers("Markers");
            var dimension_icon = new OpenLayers.Size(24,24);
            var offset_icon = new OpenLayers.Pixel(-(dimension_icon.w/2), -dimension_icon.h);
            
            var size = new OpenLayers.Size(21,25);
            var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
            var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png', size, offset);

            var markers = new OpenLayers.Layer.Markers( "Localização" );
            map.addLayer(markers);  

            var mon_marker=new OpenLayers.Marker(position, icon);

            markers.addMarker(mon_marker);
            map.addLayer(markers);
             



/*


            
            //set up projections
            // World Geodetic System 1984 projection
            var WGS84 = new OpenLayers.Projection("EPSG:4326");
            
            // WGS84 Google Mercator projection
            var WGS84_google_mercator = new OpenLayers.Projection("EPSG:900913");
            //Initialize the map
            //creates a new openlayers map in the <div> html element id map
            var map = new OpenLayers.Map ("map", {
                controls:[
                    //allows the user pan ability
                    new OpenLayers.Control.Navigation(),
                    //displays the pan/zoom tools
                    new OpenLayers.Control.PanZoom(),
                    //displays a layer switcher
                    new OpenLayers.Control.LayerSwitcher(),
                    //displays the mouse position's coordinates in a <div> html element with
                    new OpenLayers.Control.MousePosition({
                        div:document.getElementById("coordinates")
                    })
                ],
                    projection: WGS84_google_mercator,
                    displayProjection: WGS84
                    
        
            } );
            //base layers
            var openstreetmap = new OpenLayers.Layer.OSM();
            var google_maps = new OpenLayers.Layer.Google(
                "Google Maps", {
                    numZoomLevels: 15
                }
            );
            var google_satellite = new OpenLayers.Layer.Google(
                "Google Satellite", {
                    type: google.maps.MapTypeId.SATELLITE,
                    numZoomLevels: 15
                }
            );
            //wfs overlay
            var wfs_layer = new OpenLayers.Layer.Vector("Blocks", {
                strategies: [new OpenLayers.Strategy.BBOX()],
                projection: WGS84,
                protocol: new OpenLayers.Protocol.WFS({
                    version: "1.1.0",
                    url: "http://hazardmapping.com/geoserver/wfs",
                    featureNS :  "http://www.opengeospatial.net/cite",
                    featureType: "testblocks",
                })
            });
            map.addLayers([openstreetmap, google_maps, google_satellite, wfs_layer]);
                        

            //add markers
            var couche_markers = new OpenLayers.Layer.Markers("Markers");
            var dimension_icon = new OpenLayers.Size(24,24);
            var offset_icon = new OpenLayers.Pixel(-(dimension_icon.w/2), -dimension_icon.h);
            
            var size = new OpenLayers.Size(21,25);
            var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
            var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png', size, offset);

            var lonlat=new OpenLayers.LonLat(lng,lat).transform(new OpenLayers.Projection("EPSG:4326"),new OpenLayers.Projection("EPSG:900913"));

            //var lonlat = new OpenLayers.LonLat(32.582224,-25.97097).transform(new OpenLayers.//Projection("EPSG:4326"),new OpenLayers.Projection("EPSG:900913"));
            map.setCenter(lonlat, 15);
            //map.zoomTo(15);

            var markers = new OpenLayers.Layer.Markers( "Markers" );
            map.addLayer(markers);  

            var mon_marker=new OpenLayers.Marker(lonlat, icon);

            markers.addMarker(mon_marker);
            map.addLayer(markers);
             
            map.zoomToMaxExtent(); */

        }
        </script>

<%#

<script>
function initialize() {
 
  

  var mapOptions = {
    zoom: 15,
    center: new google.maps.LatLng(lat,lng),
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  var mapDiv = document.getElementById('map-canvass');
  var map = new google.maps.Map(mapDiv, mapOptions);

  
  var myLatlng = new google.maps.LatLng(lat,lng);
  var marker = new google.maps.Marker({
      position: myLatlng,
      map: map,
      title: ''
  });
  
  // Add circle overlay and bind to marker
  var circle = new google.maps.Circle({
    map: map,
    radius:raio,    // metres
    fillColor: '#AA0000'
  });
  circle.bindTo('center', marker, 'position');
  
  google.maps.event.addDomListener(window, 'load', initialize);
}



</script>
%>

<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css">

<link rel="stylesheet" href="http://blueimp.github.io/Gallery/css/blueimp-gallery.min.css">    

<script src="http://blueimp.github.io/Gallery/js/jquery.blueimp-gallery.min.js"></script>


<script>
document.getElementById('links').onclick = function (event) {
    event = event || window.event;
    var target = event.target || event.srcElement,
        link = target.src ? target.parentNode : target,
        options = {index: link, event: event},
        links = this.getElementsByTagName('a');
    blueimp.Gallery(links, options);
};
</script>



<p>
<center>
<% @imovel.documentos.each do |doc| %>
      <% if doc.descricao == "Geral" %> 
            <%= image_tag doc.avatar.url, :size => "300x300"%>
          <%end%>
      <%end%>

</center>
  
</p>


<div class="accordion" id="accordion2">
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne">
        Dados Gerais - <%= @imovel.id %>
      </a>
    </div>
    <div id="collapseOne" class="accordion-body collapse in">
      <div class="accordion-inner">
        <p>
          <b>Detalhes:</b>
          <%= @imovel.descriacao %>
        </p>

<p>
  <b>Tipo Imóvel:</b>
  <%= @imovel.tipoImovel %>
</p>

<p>
  <b>Tipo de Negócio:</b>
  <%= @imovel.tipoNegocio %>
</p>

<p>
  <b>Estado:</b>
  <%= @imovel.estado %>
</p>

<p>
  <b>Área:</b>
  <%= @imovel.area %>
</p>

<p>
  <b>Preço:</b>
  <span class="price"><%= number_to_currency(@imovel.preco ) %></span>
  
</p>

<p>
  <b>Localização:</b>
  <%= @imovel.localizacao %>
  
  <b>Zona:</b>
  <%= @imovel.zona %>
  

  <b>Cidade:</b>
  <%= @imovel.cidade %>
</p>

      </div>
    </div>
  </div>
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseTwo">
        Galeria de Fotos
      </a>
    </div>
    <div id="collapseTwo" class="accordion-body collapse">
      <div class="accordion-inner">

<!-- The Bootstrap Image Gallery lightbox, should be a child element of the document body -->
<div id="blueimp-gallery" class="blueimp-gallery">
    <!-- The container for the modal slides -->
    <div class="slides"></div>
    <!-- Controls for the borderless lightbox -->
    <h3 class="title"></h3>
    <a class="prev">‹</a>
    <a class="next">›</a>
    <a class="close">×</a>
    <a class="play-pause"></a>
    <ol class="indicator"></ol>
    <!-- The modal dialog, which will be used to wrap the lightbox content -->
    <div class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" aria-hidden="true">&times;</button>
                    <h4 class="modal-title"></h4>
                </div>
                <div class="modal-body next"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default pull-left prev">
                        <i class="glyphicon glyphicon-chevron-left"></i>
                        Previous
                    </button>
                    <button type="button" class="btn btn-primary next">
                        Next
                        <i class="glyphicon glyphicon-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

      
        <div id="gallery" data-toggle="modal-gallery" data-target="#modal-gallery" data-selector="div.gallery-item">
          <div id="links">
            <% @imovel.documentos.each do |doc| %>
    
              <a href="<%= doc.avatar.url%>" title="<%= doc.descricao%>" data-gallery> 
                  <%= image_tag doc.avatar.url, :size => "100x100", :title => doc.descricao %>
                </a>

            <%end%>
          </div>
        </div>

      </div>
    

    </div>
  </div>
  
  
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion3" href="#collapseTree">
         Localização No Mapa
      </a>
    </div>
    <div id="collapseTree" class="accordion-body collapse">
      <div class="accordion-inner">
        
         <div id="map-canvass"></div>
         <div style='width: 600px;'>
          <div id="map" style="width:600px; height:400px;"></div>
        </div>
        
      </div>
    
    </div>
  </div>

  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion4" href="#collapseTree1">
         Entre em Contacto
      </a>
    </div>
    <div id="collapseTree1" class="accordion-body collapse">
      <div class="accordion-inner">
        Celular: <%= Company.first.celular%>
        <br>
        <br>
        Email: <%= mail_to Company.first.email,Company.first.email, subject: "Dados do Imovel - #{@imovel.id}"  %>
      </div>
    
    </div>
  </div>

</div>  


<% if can? :manage, current_user %> 
<%= link_to 'Editar', edit_imovel_path(@imovel), class: "btn btn-small btn-info" %> |
<%end%>
<%= link_to 'Voltar', imovels_path, class: "btn btn-small btn-danger" %> |
<%= link_to 'Imprimir', imovel_path(@imovel, format: 'pdf')  , class: "btn btn-small btn-info"%> 



